<?php
	namespace Distynct;
	
	use \api as api;
	
	class Session {
		private static $config		= null;
		private static $salt		= null;
		private $logged_in			= false;
		private $logged_in_verified	= null;
		private $data				= null;
		private $account			= null;
		
		public function __construct() {
			if(null === self::$config) {
				self::$config = Config::get('Session', array());
				
				if(!isset(self::$config['cookie_name']) || ("" === self::$config['cookie_name'])) {
					self::$config['cookie_name'] = "session";
				}
				
				if(!isset(self::$config['expires'])) {
					self::$config['expires'] = 7;   // number of days
				}
				
				if(!isset(self::$config['salt'])) {
					self::$config['salt'] = substr(md5(getenv("HTTP_HOST")), 0, 8);
				}
			}
			
			$this->data = api::cookie()->get(self::$config['cookie_name'], null);
			$this->logged_in = (null !== $this->data);
		}
		
		
		public function isLoggedIn() {
			//return ((true === $this->logged_in) && (null !== $this->data));
			return $this->logged_in;
		}
		
		public function verifyLoggedIn() {
			if(null === $this->logged_in_verified) {
				$account_data = $this->decode_session_data();
				
				$this->logged_in_verified = !empty($account_data['account_id']);
			}
			
			return $this->logged_in_verified;
		}
		
		public function logout() {
			api::cookie()->delete( self::$config['cookie_name'] );
			
			// reset instance variables
			$this->logged_in = false;
			$this->account = null;
			
			return $return;
		}
		
		public function login($account_id, $account_hash=false) {
			if($account_id instanceof User) {
				$user = $account_id;
				
				$account_id = $user->getId();
				$account_hash = $user->getAccountHash();
			}
			
			api::cookie()->set(self::$config['cookie_name'], $this->encode_session_data($account_id, $account_hash));
			
			$this->logged_in = true;
		}
		
		private function decode_session_data() {
			if(null === $this->account) {
				$account_id = null;
				$creation_date = null;
				$account_hash = null;
				
				if($this->isLoggedIn()) {
					if(preg_match("#^([0-9]+),([0-9]{4}\-[0-9]{2}\-[0-9]{2}T[0-9]{2}\:[0-9]{2}\:[0-9]{2}),([a-f0-9]{38})$#", $this->data, $match)) {
						if(false !== strpos(self::$config['salt'], substr($match[3], 32, 6))) {
							$account_id = $match[1];
							$creation_date = $match[2];
							$account_hash = substr($match[3], 0, 32);
						}
					}
					
					if(null === $account_id) {
						// wipe cookie from user
						$this->logout();
					}
				}
				
				$this->account = array(
					'account_id'	=> $account_id,
					'creation_date'	=> $creation_date,
					'account_hash'	=> $account_hash,
				);
			}
			
			return $this->account;
		}
		
		public function encode_session_data($user_id, $account_hash, $creation_date=false) {
			// account_hash = md5 hash generated by Account::...()
			return implode(",", array(
				$user_id,
				date("Y-m-d\TH:i:a", ($creation_date?$creation_date:time())),
				$account_hash . substr(self::$config['salt'], (rand(0, (32 - 1 - 6))), 6),
			));
		}
	}